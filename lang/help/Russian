Пользовательское руководство


$ Отказ от ответственности

Kaapython поставляется под положениями BSD License. Смотри файл [License] в директории программы для получения детальной информации.

$ Замечание

Вполне возможно, что в настоящем руководстве не освещены некоторые последние новшества.

$ Введение

Kaapython это Python IDE (ну ладно, это редактор, который стремится быть IDE ;-) на вашем смартфоне с IDLE-подобными особенностями. Это позволяет вам редактировать, исполнять и отлаживать ваши сценарии прямо на своём смартфоне. Kaapython-особенность мультидокументного интерфейса означает, что вы можете одновременно работать со многими файлами и переключаться между ними в любое время. Он также может быть легко расширен с помощью плагинов, которые пишутся на Python.

$ Использование

После старта Kaapython приветствует вас пустым экраном с одной только информацией о версии. Это десктоп Kaapython, который будет виден, если все другие окна закрыты. Нажатие правой софтклавиши (Exit), пока отображается десктоп, закрывает Kaapython. В остальных случаях это действие либо закрывает текущее открытое окно, либо вызывает [Файловое меню].

Чтобы начать работу, направляемся в [Options] меню или нажимаем клавишу Select, которая позволит вам быстро загрузить файл или создать новый.

Вы также можете конфигурировать шорткаты клавиатуры, чтобы сделать вашу работу ещё быстрее. Смотрите главу [Шорткаты] для уточнения деталей.

$$ Options

Меню опций всегда доступно по нажатию левой софтклавиши. Все опции, перечисленные здесь, доступны в большинстве окон Kaapython.

* Файловое меню - содержит опции, необходимые чтобы открывать существующие или создавать новые файлы. При открытии заставляет [Файловый браузер] открыться, чтобы позволить вам выбрать файл для загрузки.

* Меню окон - выводится список всех текущих открытых окон и позволяет вам переключаться между ними. Эта функция быстро доступна по нажатию шортката Зеленая-Зеленая (Зеленая клавиша(кл. Вызова), нажатая дважды). Также можно просто удерживать Зеленую клавишу некоторое время. Это меню скрыто (не показывается), если нет открытых окон, кроме текущего.


* Меню Python - содержит Python специфичные опции.

** Консоль - открывает [Консоль] или переключает на неё, если она уже открыта.

** Запустить Скрипт - открывает [Файловый браузер], что позволит вам выбрать скрипт для исполнения.
Стандартный ввод/вывод будет перенаправлен в [Консоль], которая будет открыта первой, если это понадобится.
Пространство имен скрипта будет доступно в консоли после его выполнения для послесмертной (post-mortem) отладки.
(Иными словами, если скрипт содержит, например, программу 'x = 1; y = x % 2', то после выполнения вы можете узнать чему равен и x, и y, набрав в консоли '>>> x, y' --> '(1, 1)').
Если опция 'Запрос аргументов' включена в [Установках], Kaapython будет запрашивать аргументы для скрипта перед его выполнением.
(Туманное объяснение автором Ped (который, ещё раз напомню, является основой для Kaapython) назначения этой опции не позволяет получить ясное представление, для чего она нужна.
Она позволяет задать аргументы командной строки для скрипта. То есть можно тестировать скрипты, принимающие ключи запуска. Просто укажите при запуске в появляющемся диалоге нужные параметры, в примерно таком виде:
   -h "parameter"

То есть ключи можно указывать как в закавыченном виде (что удобно, когда они представляют из себя строку, которую нельзя разбивать), так и без них.
Введеные параметры будут разобраны и добавлены в sys.argv .

** Компилир. Скрипт... - открывает [Файловый браузер], что позволит вам выбрать скрипт для компилирования в байткод. Скомпилированный файл сохраняется рядом с расширением '*.pyc'.

** Декомпилир. Скрипт... - открывает [Файловый браузер], что позволит вам выбрать '*.pyc'-файл для получения исходного кода. Полученный исходник будет сохранен рядом с расширением '*.pyc_dis'.

* Меню инструментов - содержит довольно редко используемые опции, такие как [Установки], [Плагины], это руководство или Ориентация экрана, которая позволит вам переключать Kaapython между портретным и ландшафтным режимами на смартфонах 3rd edition.

* В этой версии... - список изменений, внесенных в данный релиз редактора.

* Выход - закрывает Kaapython. Перед закрытием вы будете опрошены на предмет того, хотите ли вы сохранить текущую сессию работы или закрыть все открытые документы. Для получения большей информации про сессии прочитайте главу [Сессии]. Если вы выберете закрыть все файлы, вы будете опрошены на предмет того, хотите ли вы предварительно сохранить сделанные в них изменения.

$$ Текст

Текстовыми окнами называются все окна, отображающие текст, включая это окно путеводителя. Они добавляют специфичные для текста функции в меню [Options].

* Меню Правка - содержит функции, используемые для поиска от начала до конца текста, включая как базовую Найти (переход к первому найденному совпадению в тексте), так и Найти Все функции (ищутся и отображаются все совпадения в тексте), или функцию К строке... (переход к строке с заданным порядковым номером; если задать заведомо больший номер чем доступно (например, всего строк 50, а указан 99 номер), переход будет осуществлен в конец текста).
Регулярные выражения в поиске не поддерживаются.
Причина: а кто ими владеет из числа пользователей Kaapython? :-) Включая самого автора, кстати.
Если у Вас есть такая необходимость, создайте соответствующее Issue на http://code.google.com/p/kaapython-pys60.

* Полный Экран (Меню инструментов) - эта опция последовательно прячет верхнюю панель (где отображаются иконка и имя файла), а затем и нижнюю панель (где отображаются надписи над софтклавишами), предоставляя больше пространства для текста. 

Также добавляются специфичные для текстовых окон функции, доступные для задания шорткатов

$$$ Задать выделение текста - приспособлена под использование смартфона одной рукой 
(двумя руками печатать текст, конечно, намного быстрее, но иногда одной рукой удобнее или даже просто необходимо);
при первом вызове запоминается одна граница текста, который будет выделенным, при втором вызове выделяется участок текста между первоначальной границей и текущей позицией курсора,
заметьте, одновременно этот участок текста копируется в системный буфер 
(то есть вы можете вставить скопированное в текст привычным способом:
если у вас не QWERTY клавиатура, то нажмите и удерживайте клавишу Карандаш (или Решетка, на смартфонах 3-rd. ed FP >= 1)).
Эта опция подразумевает использование следующей опции
$$$ Вставить текст - вставляет текст из системного буфера в текущий текст.
$$$ Заменить текст - вводим старый текст, затем новый текст. Старый текст будет заменён новым. Эта опция, разумеется, регистрозависима для избежания возможных неловкостей, поскольку функции Отмена пока не предусмотрено.
Используйте опцию с осторожностью.
$$$ К закладке... - отображает список сделанных закладок.
$$$ Добавить закладку - запоминает текущую позицию курсора в тексте вместе с частью строки. 
С помощью функции К закладке... Вы можете выбрать из списка сделанных закладок нужную и переместиться к ней, что упрощает навигацию по тексту.

Заметьте, что сделанные закладки хранятся только в текущей [Сессии] работы.
Если Вы по завершении работы сохраните текущую [Сессию], то закладки для каждого текстового файла будут также сохранены.
Поскольку последняя [Сессия] удаляется после восстановления (или отказа от него), то и закладки тоже будут удалены.

Объясню, почему закладки не добавляются в редактируемый текст в виде какого-либо специального тега, обеспечивая таким образом своё долговременное хранение и возможность использования.
Что есть закладка? 
Редактируешь текст, хочешь переместиться в другое место, а потом вернуться. Ни через день, ни через неделю Вам эта закладка нужна не будет -- Вы попросту не вспомните для чего её поставили.
Зачем тогда оставлять мусор в тексте?
Сохраняйте [Сессию], если всё же хотите сохранить закладки.


Текстовое окно также назначает специальные функции на разные клавиши.

* Select - вставляет новую строку; если у вас полная клавиатура, используйте Enter.
* Зеленая-Вверх/Вниз - перемещает вид на одну страницу вверх/вниз (смотрите в [Текстовой группе] [Установок] диалог для дополнительной информации, как сделать работу этой функции более индивидуальной).
* Зеленая-Влево/Вправо - перемещает курсор в начало/конец строки.
* Зеленая-Левая софтклавиша - Задать выделение текста.
* Зеленая-Правая софтклавиша - Вставить текст.

$$ Редактор

Открытие текстового файла или создание нового будет открывать окно текстового редактора. Это окно встроено в верхушку окна [Текст] и поддерживает все его возможности.

Файловое меню в меню [Options] содержит дополнительно.

* Сохранить, Сохранить как - сохраняет файл, используя текущее имя файла или новое.
* Закрыть - закрывает текущий файл. Если в нём имеются несохраненные изменения, Kaapython выдаст запрос, хотите ли вы сохранить их перед закрытием.
* Сохранить Все, Закрыть Все - работают как Сохранить и Закрыть, но для всех текущих открытых файлов.

$$ Редактор Python

Окно редактора Python появляется после открытия *.py файлов или создании нового такого файла. Он базируется на окне [Редактора] и поддерживает все его особенности. Вдобавок он делает редактирование Python-кода на смартфоне проще.

Умная особенность автовставки отступов доступна с настраиваемым размером отступа (смотрите [Python группу] в диалоге [Установок]).

Шорткат Зеленая-Select связан с особенностью [Автодополнение], которая позволит вам набирать код намного быстрее.

Функция [Указатель Вызова] добавлена в меню Правка.

Ненастраиваемый шорткат Зеленая-C связан с особенностью [переключение режимов шорткатов].

Другая функция, добавленная в меню Правка, - [Обзор Кода]. Она позволит вам просто просматривать все классы и их структуру, а также функции, объявленные в вашем файле.

Когда вы получите на ваш взгляд готовый код и захотите протестировать его, используйте опцию Пуск из меню опций. Заметьте, что эта функция не сохраняет файл. Если вы сделали изменения со времени последнего сохранения, файл будет сохранен во временный файл в оперативной памяти - диск D - и тот будет запущен.

$$ Консоль

Окно Консоли открывается при использовании опции Консоль меню [Options]. Оно базируется на окне [Текст] и поддерживает все его возможности.

Консоль это интерактивная Python-консоль, перемещающая (вместе с опцией [Запустить Скрипт]) функциональность обычной консоли, поставляемой с PyS60. Она также добавляет много полезных особенностей и не имеет некоторых багов стандартной консоли.

Правильная особенность, IDLE-подобная командная история.
Многострочные команды типа циклов, классов или функций также поддерживаются. Для просмотра истории вы можете использовать функцию История в меню опций или шорткаты Зеленая-Вверх/Вниз. Также обоими этими способами вы можете прокручивать историю вперёд/назад и кликать на любой строке для копирования её в промт.

Умная особенность автовставки отступа также доступна. Размер отступа может быть настроен в [Python группе] диалога [Установок].

Шорткат Зеленая-Select связан с особенностью [Автодополнение], которая позволит вам набирать более быстро.

Функция [Указатель Вызова] добавлена в меню Правка.

Вы можете очистить буфер (дисплей) в любое время, используя опцию Очистить из меню Правка.

Файловое меню содержит опцию Экспорт буфера в файл после выбора его в [Файловом Браузере].

Командная история по умолчанию содержит команду для старта блютуз-консоли.

$$ Установки

Диалог установок открывается при выборе пункта Установки из меню Инструменты (смотрите меню [Options]). Это позволит вам подогнать Kaapython под свои нужды. Диалог Установок разделен на несколько групп.

$$$ Главная группа

Эта группа содержит глобальные опции Kaapython.

* Язык - язык интерфейса пользователя Kaapython. Необходим рестарт Kaapython после изменения (на данный момент имеются два поддерживаемых языка: английский по умолчанию и, опционально, русский).

* Обои - при установке флага в положение Вкл, вместо стандартного десктопа Kaapython будут отображаться стандартные же обои. За это отвечает файл "wallpaper.jpg" в директории Kaapython.

* Уведомления - включает/отключает все уведомления редактора, такие как "Файл сохранен" и т.д..

* Системное приложение - установите флаг в положение Вкл, чтобы сделать Kaapython системным приложением. После этого операционная система не сможет закрыть Kaapython, когда он будет находиться в фоне (свернут), при нехватке памяти. Также на смартфонах с Symbian 3-rd. edition нажатие на Красную клавишу не будет приводить к закрытию Kaapython, а будет переводить Kaapython в фон.

* Глобальные шорткаты - глобальные [Шорткаты] клавиатуры, содержат два пункта:
** Режим [0] - основной режим.
Основной режим любой группы шорткатов является дефолтным.
Шорткаты, объявленные здесь, применяются ко всем окнам Kaapython, включая десктоп.

** Режим [1] - вспомогательный режим. Позволяет назначить ещё одну группу функций на те же клавиши, что и шорткаты основного режима.
Таким образом количество функций доступных посредством шорткатов удваивается.

Переключение между основным и вспомогательными режимами как глобальных, так и других [Шорткатов] осуществляется ненастраиваемым шорткатом Зеленая-C.
Информация о текущем режиме шорткатов располагается на панели дисплея над софтклавишами справа в виде пары символов: решетки "#" и цифрового идентификатора режима шорткатов (0 или 1).

Таким образом вы можете назначить на шорткаты вспомогательного режима редкоиспользуемые функции, которые, тем не менее, не доступны из меню [Опции], и вы недоумеваете, почему в редакторе с шорткатами приходится листать это идиотское меню :-).

Поскольку в [Консоли] шорткат Зеленая-C зарезервирован под очищение строки промта, добавлена функция Смена режима шорткатов в список функций доступных для шорткатов в [Консоли].


$$$ группа Текст

Эта группа содержит опции для каждого окна Kaapython, где отображается текст, включая [Редактор], [Python редактор] и [Консоль].

* Выбрать шрифт - имя шрифта.

* Размер шрифта - размер шрифта. Не имеет эффекта на смартфонах 2nd edition.

* Антиалиасинг шрифта - включает или отключает анти-алиасинг шрифта. Не имеет эффекта на смартфонах 2nd edition.

* Жирный шрифт - жирный/нежирный шрифт.

* Цвет шрифта - цвет текста.

* Размер страницы (полный экран) - количество строк на экране, когда он в полноэкранном режиме (портретный режим, полный экран включен). Эта установка используется в функциональности пролистывания страниц вверх/вниз (смотрите главу [Редактор]) (Подсчитываете количество строк, помешающееся на экране при текущих настройках шрифта и устанавливаете это значение, чтобы при использовании шортката Зеленая-Вверх/Вниз курсор перемещался на заданное количество строк, то есть ровно на одну страницу. Или на любое произвольное количество строк).

* Размер страницы (портрет) - количество строк на экране, когда портретный режим (полный экран отключен).

* Размер страницы (ландшафт) - количество строк на экране, когда экран в ландшафтном режиме.

* Текст: шорткаты
** Режим [0] - текстовые [Шорткаты] клавиатуры, основной режим [0]. Эти шорткаты добавляются поверх основного режима глобальных шорткатов, объявленных в  [Главной группе], переопределяя их для всех текстовых окон.

** Режим [1] - текстовые [Шорткаты] клавиатуры, вспомогательный режим.

$$$ группа Файл

Эта группа содержит опции для окон Kaapython, которые используются для редактирования файлов, включая [Редактор] и [Python редактор].

* Кодировка по умолчанию - новые файлы будут сохраняться с использованием этой кодировки. Уже открытые файлы будут сохраняться в старой кодировке.

* Автосохранение - если не установлено значение "Выкл", файлы будут автоматически сохраняться через заданные временные интервалы. Эта опция не применяется к новым файлам (с автоматически генерируемыми при создании именами вида Unnamed*.py), которые для этого необходимо сначала вручную сохранить, указав имя.
Используйте эту опцию с осторожностью: иногда неловкими действиями можно испортить текст, и тогда единственный выход заключается в том, чтобы закрыть файл, не сохраняя сделанные ошибочные изменения, и открыть заново. Очевидно, если Автосохранение успеет сработать, то радости это не принесет ;-).
Лучше назначьте на какой-либо шорткат функцию Сохранить и используйте её по мере необходимости.

* Текстовые файлы: шорткаты
** Режим [0] - шорткаты клавиатуры в текстовых файлах, основной режим. Эти шорткаты добавляются к окнам редактора поверх шорткатов, объявленых в [Текстовой группе], переопределяя их для текстовых файлов.

** Режим [1] - шорткаты клавиатуры в текстовых файлах, вспомогательный режим.

$$$ группа Python

Эта группа содержит все Python-специфичные опции.
Добавлена важная особенностей:
$$$$ Подсветка кода - раскрашивает текущую строку в разные цвета в соответствии с синтаксисом Python.
$$$$ Подсветка строки - раскрашивает текущую строку. Аналогична функции Подсветка кода, но действует только для одной строки. Автоматически срабатывает при нажатии на Select, а также, внимание, при вводе пробела " ", то есть это практически инлайновая подсветка!
Есть одно но.
В связи с последней особенностью имеется один неприятный баг: на смартфонах, имеющих цифровую, а не-QWERTY, клавиатуру будет затруднен ввод символа "0", так как за ввод пробела и нуля отвечает одна и та же клавиша.
Для разрешения этой проблемы есть два выхода:
1. Установить параметр Подсветка в-строке (см. ниже) в значение Выкл.
2. Предлагаю следующий юзкейс: назначьте на какой-либо шорткат функцию "(ничего)" (не путайте с функцией "ничего не делать", которая не имеет того побочного эффекта, который я хочу предложить использовать). Эта функция позволяет использовать клавиши по прямому назначению: к примеру, назначив её на шорткат Зеленая-0, при использовании этого шортката в текст будет добавлен символ "0", что нам, собственно, и требуется.
Кроме того, благодаря другому побочному эффекту, для введения N-символов нуля совсем не обязательно будет использовать шорткат N-раз, как кто-то уже успел испугаться. Схема использования шортката в этом случае будет выглядеть как Зеленая-0-. . .-0, то есть нажимаете Зеленую клавишу и далее нужное число раз нажимаете клавишу 0.
Это, кстати, тоже стандартный юзкейс, который можно применить почти к любому шорткату, например, использовать для вставки нескольких одинаковых участков текста подряд с помощью функции Вставить текст.

$$$$ подгруппа Подсветка Кода

Эта подгруппа позволяет отредактировать схему цветового окрашивания синтаксиса исходного кода Python.

* keyword

К этой категории относятся имена, зарезервированные для идентификаторов языка, которые нельзя переопределить. Их список содержится в модуле keyword (keyword.kwlist).

* module

К этой категории относятся имена модулей: встроенных, импортированных и находящихся по путям импорта.

* builtin

К этой категории относятся имена, определенные во встроенном пространстве имён, то есть в модуле __builtin__ ( dir(__builtin__) ).

* number

К этой категории относятся все литеральные способы записи всех числовых типов данных Python:

тип "int" --> 1, 01, 0x1 (десятичная, восьмеричная и шестнадцатеричная нотация)
тип "long" --> 1L, 1l
тип "float" --> 1.0, .5, 1.
тип "complex" --> 1 + 0j,  1j,  3 + 3J,  3J

* string

К этой категории относятся все литеральные способы записи типа "string" (строка) Python:

'a',  "a",  '''a''',  """a""", `a`

* name

К этой категории относятся все имена, определенные в программе, не попадающие под категории keyword, module или builtin.

* operation

К этой категории относятся все литеральные операторы, определенные в Python:

+, +=
-, -=
*, *=
**, **=
%, %=
/, /=
//, //=
<<, <<=
>>, >>=
~, ~=
<, <=
>, >=
==, !=
&, &=
|, |=
^, ^= 

* comment

К этой категории относятся комментарии, начинающиеся символом решетки "#".

* bracket

К этой категории относятся круглые, квадратные и фигурные скобки: "(", ")", "[", "]", "{", "}".

* percent

В эту категория выделены отдельно символы "%" и ":", поскольку каждый выполняет несколько функций в зависимости от контекста.
Это подчеркивает тот факт, что знак процента используется и как оператор форматирования строки, и как оператор получения остатка от деления; знак двоеточия используется как для указания границ среза, так и в таких важных конструкциях, как циклы for-in, while, блоки исключений try/except, условные блоки для организации ветвления программы if/elif/else.


* Подсветка в-строке - включает/отключает подсветку каждого слова после ввода пробела. Плюс в том, что можно нормально вводить 0. Построчная подсветка по-прежнему будет работать при нажатии Select (Enter).

* Пуск в новом окне консоли - иногда консоль подвисает, и это делает невозможным запуск скриптов. Использование описываемой опции предписывает редактору создавать отдельное окно консоли на каждый запуск сценария, или при выборе подвкладки [Консоль] во вкладке [Python].

* Запрос аргументов - если включено, Kaapython будет запрашивать аргументы каждый раз, когда запускается скрипт.

* Обрабатывать точки отладки:
Теперь вы можете писать в комментариях любой python код, который будет выполнен при запуске открытого скрипта. Для этого код должен быть записан после символов "#:":
    
    def foo(x, y):
        z = 2 ** x + y #:print x, y
        ...

Редактор поймет это как:
    
    def foo(x, y):
        z = 2 ** x + y 
        print x, y
        ...

Примеры неправильного применения:
    Заметьте, следующие примеры кода будут вызывать исключения:
    
    if x: ... #:print x
    else: ...
    ...

("if x: ...
print x
else: ..." это неправильный код)

и

    def foo(): #:print "foo is called!"
        ...

("def foo(): 
print "foo is called!"
    ..." это неправильный код)


Примеры правильного применения:
    Но следующие примеры будут выполнены без возникновения исключений:
    
    if x:
        ... #:print x
    else: ...
    ...

("if x: 
    ...
    print x
else: ..." правильный код)

и

    def foo():
        #:print "foo is called!"
        ...

("def foo(): 
    print "foo is called!"
    ..." правильный код)


* Консоль: цвет шрифта - цвет текста в [Консоли]. Это перегружает Цвет шрифта, установленный в [Текстовой группе].

* Размер блока отступа - количество символов пробела вставляемых особенностью автовставки отступов.

* Питон: шорткаты - [Шорткаты] клавиатуры для [Python редактора]. Эти шорткаты добавляются в окно Python редактора поверх шорткатов, определенных в [Файловой группе], переопределяя их для скриптов.

* Консоль: шорткаты - [Шорткаты] клавиатуры [Консоли]. Эти шорткаты добавляются в окно [Консоли] поверх шорткатов, определенных в [Текстовой группе].

$$$ группа Плагины

Эта группа обычно скрыта. Она показывается, если плагины добавляют туда какие-либо опции. Обратитесь к файлам помощи плагинов для получения большей информации. Прочтите секцию [Плагины] для более подробного изучения плагинов.


$$ Сессии

Во время работы редактор периодически сохраняет текущую сессию работы.
Вы можете выбрать и загрузить любую из них.


$$ Плагины

Kaapython может быть расширен при помощи специальных Kaapython-плагинов. Менеджер плагинов, открываемый при использовании опции Плагины в меню Инструменты, используется для установки или удаления плагинов. Также он показывает какие плагины на данный момент установлены и запущены, и позволяет вам просматривать их файлы Помощи (выберите Помощь из меню опций).

$$$ Установка

Kaapython не заботится о загрузке плагинов. Вы должны достать файл плагина любым способом, и переместить его на ваш смартфон. Файл плагина это простой zip-архив, содержащий Python-сценарий и ассоциированные файлы.

Если вы уже имеете файл плагина на смартфоне, выберите Установить из меню опций менеджера плагинов и выберите файл плагина, используя [Файловый браузер]. Следуйте инструкциям на экране для завершения установки.

Рестарт Kaapython необходим плагину для начала работы.

$$$ Удаление

Для удаления плагина перейдите в менеджер плагинов (смотрите [Плагины]), выберите плагин для удаления и нажмите C или выберите Удалить из меню опций. Следуйте инструкциям на экране для удаления плагина.

Рестарт Kaapython необходим, чтобы плагин прекратил работу.

$$$ Написание

На данный момент редактор не предоставляет никаких средств для упрощения создания плагинов для самого себя.
Автор также не планирует серьезных подвижек в этом направление по той простой причине, что не испытывает в этом необходимости, ибо имеет возможность добавлять нужную функциональность непосредственно в Kaapython.
Непосредственно по написанию плагинов:
Во-первых, сложности возникнут у вас, если вы захотите: добавить пункт в меню [Options], поскольку в Kaapython это не привычный список кортежей appuifw.app.menu, а нечто иное. Поэтому придется открыть файл kaapython.py и изучить этот вопрос.
Во-вторых, сложности будут подстерегать вас и при попытках вклиниться в [Установки], чтобы плагин мог хранить какие-то свои настройки или изменять стандартные; добавить опцию(и) к функционалу шорткатов.
Впрочем, это не такие непреодолимые препятствия, чтобы отпугнуть настойчивого программиста.
Во всём остальном плагин это обычный Python-сценарий, вернее, по характеру загрузки, модуль.

$$ Сессии

Механизм сессий позволяет вам восстанавливать все окна с документами после закрытия и повторного открытия приложения. Сессии сохраняются в четырех случаях.

* Перед выполнением скрипта - если скрипт терпит крах, вы будете иметь возможность продолжить вашу работу прямо оттуда, где вы остановились, после перезапуска Kaapython.
* При нажатии Красной клавиши - если вы нажмете Красную клавишу на смартфонах 3rd edition, это принудит закрыться Python (включая Kaapython). Перед тем как это случится, Kaapython сохранит текущую сессию.
* Если выбран Выход - если вы выберете опцию Выход из меню [Options], вы будете опрошены на предмет того, не хотите ли вы сохранить сессию. Делайте так, если вы хотите позднее продолжить вашу работу.
* Если смартфон испытывает недостаток памяти - Symbian OS  может закрыть приложение, работающее в фоне. Если Kaapython закрывается этим путём, сессия сохранится прежде чём это случится.

Если сессия сохранена, и Kaapython стартовал, отобразится диалог, если сессия должна быть восстановлена. Заметьте, что неважно, сессия загружена или нет, она всё-равно удаляется. Иными словами, Kaapython будет спрашивать только единожды.

$$ Шорткаты

Особенность Kaapython для полностью подгоняемых клавиатурных шорткатов. Все шорткаты всегда состоят из двух нажатий клавиш, где первой следует Зеленая клавиша.

В [Установках] вы найдете пять отдельных наборов клавиатурных шорткатов, которые вы можете настраивать.

* Глобальные шорткаты в [Главной группе].
* Текстовые шорткаты в [Текстовой группе].
* Файловые шорткаты в [Файловой группе].
* Python шорткаты в [Python группе].
* Шорткаты Консоли в [Python группе].

Только малое количество опций может быть назначено на Глобальные шорткаты. Тем не менее, эти шорткаты работают во всём приложении.

Все окна, отображающие текст, типа [Редактора], [Python редактора], [Консоли] или этого путеводителя предоставляют функции для текстовых манипуляций, которые могут быть настроены в Текстовых шорткатах.

Все окна, загружаюшие и сохраняющие файлы, типа [Редактора] или [Python редактора] обеспечивают функции для манипуляций с файлами, которые могут быть настроены в Файловых шорткатах.

Окна [Python редактора] обеспечивают специфичные для Python функции, которые могут быть настроены в Python: шорткатах.

Окно [Консоли] обеспечивает специфичные для [Консоли] функции, которые могут быть настроены в Консоль: шорткатах.

Диалог настройки шорткатов показывает на экране список текущих установленных шорткатов с опциями Добавить и Удалить в меню.
Выбор Добавить открывает меню с клавишами, которые вы можете настроить.
Если у вас полная QWERTY или внешняя клавиатуры, вы можете выбрать Ручной ввод, чтобы иметь возможность выбрать любую клавишу, производящую символ.
Введите в диалоге этот символ.
После этого просто выберите действие, которое вы хотите назначить на эту клавишу.
Например, Вы хотите назначить открытие этого файла помощи на клавишу "h". Просто введите эту букву в диалог и выберите функцию Помощь в списке.
Теперь, шорткат Зеленая-h будет связан с открытием Помощи.

$$ Обзор Кода

Обзор Кода доступен в меню Правка в окне [Python редактора]. Он парсит текущий исходный код Python, с которым вы работаете, и позволяет вам обозревать классы, методы и функции. При выборе пункта происходит прыжок к его объявлению в коде. Обзор Кода очень поможет вам, если вы редактируете большие файлы.

После открытия вы будете наблюдать список глобальных классов и функций, объявленных в вашем исходнике. Если пункт заканчивается на "->", вы можете нажать кнопку Вправо или выбрать Обзор из меню, чтобы увидеть объекты объявленные в этом объекте. Чтобы вернуться назад, нажмите Влево или выберите Назад из меню.

Кликните на объекте, чтобы выбрать его и просмотреть его объявление (все его атрибуты/методы) в коде.

Вы можете также использовать клавишу Звезда (*), чтобы отфильтровать список. Нажатие на неё поднимает диалог, где можно ввести шаблон поиска. Подтверждение диалога скрывает все пункты, которые не содержат введеный текст в своих именах.

$$ Автодополнение (далее А.)

А. позволит вам писать ваш код более быстро, дополняя имена атрибутов и функций для вас. Вы можете воспользоваться им, нажав шорткат Зеленая-Select. При его срабатывании выражение слева от курсора используется для создания списка пунктов, которые содержат его, и могли бы быть вставлены в текущую позицию курсора. Выбор любого закрывает список пунктов и вставляет выбранное в код.

Вы можете запустить А. после ввода первых нескольких символов имени функции. Список будет содержать только функции с именами, начинающимися со введеных символов. Если вы введете имя объекта, и поставите после него точку ("."), список будет содержать все атрибуты этого объекта.

Заметьте, что эта особенность лучше работает в [Консоли], потому что она интерактивна. В [Python редакторе], пространство имен последнего выполнения кода используется для создания списка А. .

==============

В версии 0.08.0 beta А. было усовершенстсвовано. Теперь в меру сил обрабатывается исходный код программы. 
---
@ При этом становятся доступны для А.:
-- имена всех определенных в редактируемом сценарие функций, классов, глобальных и локальных переменных (да, всех в одной куче), и именованных (ключевых) аргументов функций (keyword arguments).
Также доступны имена переменных цикла. Например:
for (foo, bar) in ...
и foo, и bar будут доступны для А.. Это справедливо и для list comprehensions.
-- имена модулей, загружаемых инструкцией import.
--
Внимание, фишка:
Если у вас включен T9, можно нажать две (2) клавиши, соответствующие двум начальным символам требуемого имени (именно две!), и использовать А..
Список будет дополнен именами, первые два символа которых могут быть получены путём перестановки букв, помещающихся на нажатых клавишах.
Например, Вы хотите, чтобы А. выдало вам имя "sample_from_cd".
Вы нажимаете последовательно 7-2 (на QWERTY-смартфонах просто введите "s" и "a").
Скорее всего вы увидите слово "pc". Вам потребовалось бы нажать ещё минимум 3 клавиши (7, 6 и 5),пока бы Вы увидели слово "sampl", которое могло правильно обработать старое А..
Но, благодаря описываемой возможности, слова "pc", отныне будет вполне достаточно.
Это позволит не мучать "*", перебирая варианты слов, и избавит от необходимости донабирать лишние символы.
Но главная идея - избавиться от необходимости набора символа подчеркивания, широко используемого для читабельного именования переменных, доступ к которому затруднен на смартфонах с цифровой клавиатурой.
---
@ По-прежнему недоступны при использовании А.:
-- имена позиционных аргументов функций - другими словами, 
имена глобальных переменных, создающихся без использования оператора присваивания "=".
-- имена, создающиеся при использовании сочетания присваивание-упаковка/распаковка кортежа(списка) вида:
>>> title, description = get_title_and_description_from(item)  # здесь description будет доступен для А., title - нет.
-- всё остальное.

==============

В версии 10 beta был добавлен механизм [Аббревиатур] (далее Абб.), использующий А..
У тех, кто использует, например, редактор SciTE на компьютере никаких затруднений в понимании этой опции не возникнет.
Абб. это пары ключ-значение, где ключом служит собственно сама Абб., а значением - её расшифровка.
Когда А. распознает и выделяет слово перед курсором, оно ищет его в списке Абб.. Если такая Абб. есть, слово удаляется и на его место вставляется расшифровка Абб..
В директории редактора находится текстовый файл "abbrev.txt", содержащий определения пользовательских Абб.. В главном окне [Файлового браузера] последняя ссылка под именем "Abbreviations" ведет к этому файлу.
Файл по дефолту содержит несколько примеров Абб..
Структура определения Абб. довольно проста:
    *. Абб. пишется на отдельной строке;
    *. после Абб. через произвольное кол-во пустых строк (или желательно сразу на следующей строке) пишется символ "="-сепаратор между Абб. и её расшифровкой;
    *. записываем расшифровку Абб., руководствуясь тем же правилом;
    *. указываем конец определения Абб. последовательностью из трёх символов точки с занятой:
        ";;;", также на отдельной строке;

Отмечу, что не должно быть Абб. и их расшифровок, дублирующих "=" и ";;;". Иначе вы будете удивлены поведением механизма Абб.. Сомневаюсь, что приятно.

---------------------
И, напоследок:
Ввиду несовершенного парсинга не всегда корректно распознаётся введёное слово. Поэтому иногда А. не срабатывает.



$$ Указатель Вызова

Указатель Вызова отображает информацию о синтаксисе аргументов функции. Вы должны поместить курсор внутри аргументных круглых скобок в месте вызова этой функции. Информация базируется на строках документации (docstrings) и интроспекции объекта-функции.

Для работы этой опции необходимо сначала запустить на исполнение текущий редактируемый код. После завершения исполнения вернитесь к исходному коду и теперь можете воспользоваться опцией.

Заметьте, что интроспекция работает только с чистыми Python-функциями и, поскольку большая часть встроенных функций PyS60 написаны на C, и их строки документации (docstrings) удалены для сохранения памяти, для них эта информация недоступна.

Указатель Вызова доступен в меню Правка [Консоли] и [Python редактора].

$$ Файловый Браузер

Всякий раз как возникает необходимость в выборе файла в любом месте Kaapython, используется одинаковый файловый браузер. Этот файловый браузер предоставляет много полезных особенностей, делающих работу с файлами, используя Kaapython, простой задачей.

Главный экран файлового браузера содержит список дисков, доступных на смартфоне, вкупе с быстрой ссылкой для последних открытых/сохраненных файлов и некоторыми стандартными директориями типа C:\Python или E:\Python.

Для перехода в диск или директорию могут быть использованы кнопка Вправо или опция Открыть в меню. В качестве альтернативы можно использовать кнопку Select.

Для перехода на уровень выше используйте кнопку Влево или опцию Назад в меню.

Для выбора файла используйте кнопку Select.

Клавиша Решетка (#) может быть использована для прямого перехода к главному экрану (дискам).

Клавиша Звезда (*) является фильтрующей клавишей. Нажатие на неё поднимает диалог, где можно ввести шаблон поиска. Подтверждение диалога скрывает все пункты, которые не содержат введеный текст в своих именах.

Клавиша 0 отображает дополнительную информацию о выделенном пункте, такую как размер или дата последнего изменения.

Клавиша C удаляет выделенный пункт.

Меню Options файлового браузера позволяет вам также создавать новые директории или переименовывать существующие.

$ License

Copyright (c) 2007-2008, Arkadiusz Wahlig
Copyright (c) 2010, Virtuos86

All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
    * Neither the name of Arkadiusz Wahlig and the nickname Virtuos86 nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
