Здравствуй, друг.
Ты хочешь освоить редактор, и я помогу тебе в этом (не)простом деле.
Kaapython - это редактор сильно завязанный на шоткатах.

Чтобы хорошо объяснить суть системы шоткатов, использованной в редакторе, нужно понять, как в редакторе рассматривается редактируемый текст.

В Kaapython можно редактировать текстовые файлы и сценарии на языке программирования Python.
Внутри редактора существует следующая иерархия:

Окно с текстом
            |
           V
Открытый текстовый файл
            |
           V
Открытый Python скрипт 

Каждый нижеследующий уровень наследует возможности предыдущего и расширяет их.

Например, это окно, в котором ты сейчас читаешь текст, это "Окно с текстом".
Ты можешь набирать здесь текст, редактировать его, выделять, копировать, вырезать, вставлять, но сохранить в файл не можешь.
Для чего нужны такие окна?
Чтобы отображать справочную информацию.

Окно типа "Открытый текстовый файл" на самом деле может быть вообще не соотнесено ни с каким файлом, если ты просто выбрал пункт [Новый] во вкладке [Файл меню], но оно позволяет это _в_принципе_.
То есть такое окно уже может использоваться для реальной работы с текстовыми файлами и для этого нужны соответствующие функции, доступ к которым происходит по большей части через шоткаты. И мы до них обязательно доберемся, уже совсем скоро, обещаю.

Окно типа "Открытый Python сценарий" содержит все функции для работы с текстовыми файлами, добавляя к ним функции для работы со скриптами на Python.

К чему же была эта прелюдия?
А к тому, что и система шоткатов выстроена таким образом, что позволяет настроить шоткаты в 4-ре уровня, от глобальных, которые работают для всех окон, до специфичных для каждого типа текста. При этом шоткаты каждого уровня затеняют более глобальные, то есть шоткаты текстовых файлов затеняют таковые простых окон с текстом, а шоткаты скриптов - шоткаты текстовых файлов.
И при этом каждый следующий уровень естественным образом богаче функционалом, поскольку добавляет свой, специфичный, к более общему.
Это выражается в более обширном списке функций для навешивания на шоткаты.

Теперь выбери в меню пункт [Инструменты] -> [Установки].

Ты видишь несколько пунктов, в которых собраны установочные параметры, большая часть которых придерживается описанной выше схемы: от более общих к более специфичным.
Если выбрать любой пункт, и пройтись по [Установкам] справа налево и слева направо, в этом легко убедиться.
Вот во вкладке глобальных установок есть пункт [Язык]. Совершенно очевидно, что он влияет на весь редактор, указывая какой язык локализации использовать в его интерфейсе, поэтому и помещен в самый "корень" настроек.
То же самое можно сказать и о пунктах [Уведомления] (вкл/выкл системные сообщения о событиях в редакторе) и [Системное приложение] (установить процессу редактора атрибут системного приложения).
Пункт [Обои] немного проясняет один вопрос: а в каком окне работают глобальные шоткаты, о которых я ничего пока не упомянул?
Работают они в десктопе Kaapython.
Это графическое окно, которое можно видеть, если все остальные окна закрыты.
На нём исторически отображены номер и имя текущей версии редактора.
Вместо этого можно установить обои - для этого нужно кинуть в директорию редактора картинку в формате .jpg с именем "wallpaper.jpg".
Не очень удобно, согласен, с другой стороны, пялиться в текстовом редакторе на стартовое окно приходится не так уж часто.

Но где же, где шоткаты?
Да вот же, внизу каждой вкладки - кроме последней (Плагины) - ты увидишь пункт [... шоткаты].
Когда ты её откроешь, то столкнешься с ещё одним нюансом.
Там два пункта: [Режим [0]] и [Режим [1]].
Редактор древний как отходы жизнедеятельности предков слонов, одним словом, довольно старый и сориентирован на работу на смартфонах с цифровой клавиатурой.
По причине ограниченности набора клавиш в редакторе используется схема, при которой можно создавать два набора шоткатов для каждого типа окон. 
Это они и есть, режимы [0] и [1].
Переключение между ними осуществляется с помощью специального шотката: Green-C ("C" - это клавиша с буквой C :).

Шоткаты в Kaapython - это всегда последовательность из двух последовательно нажатых клавиш, и первая из этих клавиш всегда Green - клавиша вызова.
Между этими нажатиями предусмотрена пауза, на данный момент она равна одной-полутора секундам, во время которой можно успеть нажать вторую клавишу шотката. Будьте осторожны, если вы случайно нажали клавишу вызова, подождите немного, иначе рискуете вызвать ненужный шоткат, нажав какую-нибудь клавишу.
Визуально эта пауза выражается в исчезновении курсора.

Устанавливать шоткаты просто. Подробнее о функциях доступных для шоткатов уже хорошо описано в Помощи редактора.

Теперь перейдем к вкладке Текст Установок.
Собственно нас интересует первая пункт списка - Темы шрифта. Здесь можно выбрать то, как будет выглядеть текст в редакторе.
Предусмотрено две темы - Dark (темная) и Light (светлая).
Идея заложена следующая: работать с текстом должно быть удобно в том числе и для глаз. Сутки поделены на день и ночь, и они очень отличаются по освещенности. Поэтому в Установках редактора есть возможность создать две схемы настроек оформления текста: в каждой из них можно выбрать свой шрифт (из тех, что установлены в телефоне), его размер, сглаживание шрифта (для 3-rd ed. телефонов), цвет, цвет подсветки (выделения); использовать ли в качестве заднего фона стандартный белый, или фон текущей темы оформления, установленной в телефоне, переносить ли слова, если строка не помещается на дисплее или позволить им уходить за его границу, размер экрана (с/без титулбара и подписей софтклавиш). Отдельного рассмотрения заслуживает пункт Стиль шрифта. Он объединяет стилистику оформления шрифта: жирный, курсив, подчеркнутый, зачеркнутый, с прямоугольным выделением, с выделение с закругленными углами, выделение тенью.
Как можно заметить, предлагаемый арсенал довольно богат.
Возможно кто-то будет разочарован небольшим выбором цветов, предлагаемых для шрифта.
Дело в том, что редактор нацелен на работу с Python-кодом, а для него есть подсветка кода, которая просто не даст возможность долго наблюдать нераскрашеный исходный код.

Следующий пункт меню вкладки Текст - Шаг курсора - призван привнести такую известную возможность "больших" редакторов, как Ctrl + -> и Ctrl + <-, то есть "шагание" курсора по словам. Работает, правда хуже, поскольку мешается T9, поэтому по дефолту эта возможность отключена.

Следующие 3 пункта - Размер страницы - позволяют настроить перелистывание текста. Поскольку клавиши PageUp/PageDown отсутствуют, то их заменяют шоткаты Green-UpArrow и Green-DownArrow (но в консоли эти шоткаты служат для перебирания введеных команд). Эти же пункты Установок помогают задать количество строк, на которые нужно перелистывать текст, для каждого из трёх возможных оформлений рабочего пространства, то есть для полного режима, портретного и ландшафтного.

Вкладка Файл Установок содержит важные пункты дефолтной кодировки редактора (то есть редактор будет открывать в этой кодировке все файлы, и сохранять новые, созданные в нём) и настройки автосохранения (то есть можно задать автоматическое сохранение всех редактируемых текстов, ассоциированных с реальными файлами; то есть Unnamed%.py, созданные с помощью пункта Новый файлового меню сохранены не будут (если только вы при закрытии редактора не выберете пункт сохранить сессию в диалоге закрытия, тогда все новые окна будут закэшированы)).

Вкладка Python также содержит некоторые неочевидные в использовании возможности.
Подсветка кода позволяет подогнать схему расцвечивания синтаксиса исходного кода Python в соответствии с твоими предпочтениями.
Краткий ликбез: keyword - ключевые слова, module - модули, builtin - объекты из встроенного пространства имён (в основном встроенные функции и исключения), number - числа, string - строки, name - пользовательские идентификаторы, operation - символы операций, comment - комментарии, bracket - скобки, а self, и cls призваны облегчить чтение классов.
Редактирование цвета сделано возможно неудобно, поэтому я надеюсь на профессионализм пользователей.

Кстати, окно Установок это обычное окно в терминологии Kaapython. То есть там работает шоткат Green-Green для переключения между открытыми окнами, поэтому вы можете переключаться между Установками и другими окнами и наблюдать сделанные изменения.
Здесь правда имеется то ограничение, что в текущей версии редактора некоторые параметры, в основном связанные с настройками шрифта, изменяются только при выходе из Установок, но некоторые всё же можно отслеживать подобным образом.

Пункт Подсветка в-строке позволяет отключить подсветку синтаксиса исходного кода при вводе пробела. К сожалению подсветка кода тормозит редактор, а продолжительная работа с включенной подсветкой в-строке особенно на достаточно больших файлах может привести к заметной задумчивости интерфейса, что в конце концов вынуждает перезагрузку редактора.
При отключении подсветки в-строке подсветка при нажатии на Enter (центр джойстика) продолжает работать.

Подключить Python API. 
Об этом пункте мы поговорим позже, когда будем рассматривать работу автодополнения.

Включение пункта Принудительное автодополнение заставляет редактор выдавать список автодополнения при вводе оператора точки после любого объекта, если редактор сможет его создать.
Попробуйте, например, ввести в Python-скрипт "globals().".

Пункт Пуск в новом окне консоли решает одну неприятную особенность изредка проявляющуюся при тестировании скриптов, а именно блокирование консоли. Поскольку любой скрипт при выполнении сначала запускает консоль, то . Выглядит это так, что что при каждом запуске скрипта открывается новое окно с консолью.

Пункт Пуск в отдельном процессе позволяет запускать скрипты в отдельном процессе. Эта возможность предназначена для тестирования скриптов, запуск которых с высокой вероятностью может привести к крушению интерпретатора. Для этого при выполнении скрипта запускается отдельное приложение -- K-Shell (для этого его нужно установить, отдельно от Kaapython) -- которое выполняет проблемный скрипт. Если произойдет вылет, то аварийно закроется K-Shell, но не Kaapython.

Пункт Обрабатывать точки отладки призван упростить тестирование скриптов. Для этого вы можете писать тестовый код в оформленных специальным видом комментариях, который будет выполняться при запуске скрипта. Для этого после решетки "#" комментария всего лишь нужно поставить двоеточие ":".
Например при запуске кода:

#:print "Test"
def foo(): pass
...

будет напечатано "Test". Отметим, что код должен идти сразу после двоеточия, никаких пробелов.

Размер блока отступа позволяет настроить автоотступ, который устанавливает сам редактор каждый раз, когда вы нажимаете Enter.
Отступ делается пробелами, это как минимум более экономно использует пространство дисплея по сравнению с табами.

Опциональная вкладка Плагины отображается в Установках только в том случае, если какой-либо плагин захочет хранить свои настройки централизованно, вместе с остальными настройками редактора. По умолчанию она скрыта. Тогда он должен создать вкладку со своим именем во вкладке Плагины, где волен размещать свои параметры.

##################

Теперь поговорим об Автодополнении в Python-скриптах.
Шоткат автодополнения находится на комбинации клавиш Green-Select(Enter).
Автодополнение позволяет не только дополнять вводимый код, но и предоставляет доступ к паре других полезных возможностей.
Здесь я возвращаюсь к пункту Принудительное автодополнение Установок

Как устроено автодополнение внутри:
Допустим ты ввел название модуля и нажал шоткат Green-Select(Enter). Редактор парсит текст и вычленяет слово, которое ты хочешь дополнить. При этом возможны несколько вариантов использования автодополнения:
- ты набрал не всё слово, а только несколько первых символов и хочешь получить список возможных вариантов подстановки. При этом предусматривается такая неприятная ситуация: иногда T9 в качестве подходящего варианта выдает русскоязычный шаблон, несмотря на установленный английский ввод; но редактор всё равно старается строить список так, как будто слово набрано английскими буквами (но при этом он берет в рассмотрение только первые три символа); также иногда шаблон выдается хоть и английскими буквами, но не тот - редактор и здесь пытается отобразить все доступные варианты. Разумеется релевантность дополнения может быть довольно низкой.
- ты набрал слово целиком и хочешь получить список атрибутов объекта, который скрывается за этим идентификатором. Для этого после него в соответствии с синтаксисом Python нужно поставить точку и воспользоваться шоткатом автодополнения. Все данные берутся из текущего пространства имён. Поэтому настоятельно рекомендуется перед использованием автодополнения сделать тестовый запуск скрипта. Тогда редактор при его выполнении получит всю необходимую информацию. В противном случае вместо автодополнения ты получишь пустой список. Как минимум тестовый запуск полезно совершить сразу после того, как записаны импорты всех модулей.
- ты ввел идентификатор и хочешь получить информацию об этом объекте. Для встроенных объектов и модулей стандартной библиотеки в этом может помочь такая возможность как пункт doc, всегда располагающийся на предпоследнем месте в списке автодополнения. Если выбрать его, увидишь подсказку. Например, попробуй узнать информацию о стандартном модуле "sys".
Доступность этой возможности зависит от пункта Установок Подключить Python API. По умолчанию он выключен, для экономии потребления оперативной памяти.
- тебе не нужно дополнение, ты хочешь произвести некоторую трансформацию слова, к примеру, обрамить его скобками и кавычками. Иногда такая необходимость возникает, и приходится вырезать слово, вводить нужные символы, а затем помещать слово из буфера в нужное место. Пункт автодополнения (expression), который всегда находится на последнем месте в списке автодополнения, помогает решить некоторые часто встречающиеся задачи такого рода. Просто воспользуйся им и посмотри на результат.
- наконец может возникнуть ситуация когда ты либо не хочешь дополнить никакое слово. Тогда автодополнение предложит список из некоторых часто используемых символьных комбинаций (которые можно изменять и дополнять через пункт Редактировать Автодополнение меню Правка).

###############
Tips and tricks
###############

В Kaapython есть консоль, полноценная Python-консоль, с ведением истории команд, с возможностью ввода многострочных конструкций типа определения функций-классов-циклов. Есть специальный шоткат Green-C для удаления сразу всей текущей строки, причём курсор не обязательно помещать в конец строки, он может находиться хоть в её начале, хоть в середине.
Среди шоткатов доступных для консоли в Установках есть такой полезный как Очистить буфер. Он удаляет весь введеный в консоль текст.
В консоли расцветает всеми красками автодополнение, поскольку редактор получает всю информацию о вводимом коде.